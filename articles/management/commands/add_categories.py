# -*- coding: utf-8 -*-
from django.core.management.base import BaseCommand
from django.utils.text import slugify
from articles.models import Category


class Command(BaseCommand):
    help = '–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ VC.ru'

    def handle(self, *args, **options):
        new_categories = [
            {"name": "–ü—Ä–∞–≤–æ", "icon": "‚öñÔ∏è", "description": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"},
            {"name": "–¢–µ—Ö–Ω–∏–∫–∞", "icon": "üîß", "description": "–ì–∞–¥–∂–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞"},
            {"name": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã", "icon": "üõçÔ∏è", "description": "–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö"},
            {"name": "–ö–µ–π—Å—ã —Ä–æ—Å—Ç–∞", "icon": "üìä", "description": "–£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã –±–∏–∑–Ω–µ—Å–∞"},
            {"name": "–¢–µ–ª–µ–≥—Ä–∞–º", "icon": "üí¨", "description": "Telegram –±–æ—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã"},
            {"name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "icon": "üöó", "description": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞"},
            {"name": "–ü—Ä–∏—ë–º–Ω–∞—è", "icon": "üì∫", "description": "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"},
            {"name": "–°–æ—Ü—Å–µ—Ç–∏", "icon": "üíï", "description": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"},
            {"name": "SEO", "icon": "üîç", "description": "–ü–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"},
            {"name": "–ë—É–¥—É—â–µ–µ", "icon": "üîÆ", "description": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ"},
            {"name": "–ß—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å", "icon": "üìö", "description": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥"},
            {"name": "–†–∏—Ç–µ–π–ª", "icon": "üè™", "description": "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"},
            {"name": "–û—Ñ–ª–∞–π–Ω", "icon": "üîò", "description": "–û—Ñ–ª–∞–π–Ω –±–∏–∑–Ω–µ—Å"},
            {"name": "–û—Ñ—Ç–æ–ø", "icon": "üé≠", "description": "–†–∞–∑–Ω–æ–µ"},
            {"name": "–ï–¥–∞", "icon": "üç¥", "description": "–ö—É–ª–∏–Ω–∞—Ä–∏—è –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"},
            {"name": "–ú–∏–≥—Ä–∞—Ü–∏—è", "icon": "‚ÑπÔ∏è", "description": "–ü–µ—Ä–µ–µ–∑–¥ –∏ –º–∏–≥—Ä–∞—Ü–∏—è"},
            {"name": "–¢—Ä–∏–±—É–Ω–∞", "icon": "‚öîÔ∏è", "description": "–î–∏—Å–∫—É—Å—Å–∏–∏"},
            {"name": "–ò—Å—Ç–æ—Ä–∏–∏", "icon": "üé™", "description": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏"},
            {"name": "–í–∏–¥–µ–æ", "icon": "‚ñ∂Ô∏è", "description": "–í–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç"},
            {"name": "ChatGPT", "icon": "üåÄ", "description": "ChatGPT –∏ AI"},
            {"name": "–í–æ–ø—Ä–æ—Å—ã", "icon": "‚ùì", "description": "–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"},
            {"name": "–ë—É–¥–Ω–∏", "icon": "üåô", "description": "–ë—É–¥–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"},
            {"name": "–û—Ñ–∏—Å", "icon": "ü¶ó", "description": "–û—Ñ–∏—Å–Ω–∞—è –∂–∏–∑–Ω—å"},
            {"name": "Apple", "icon": "üçé", "description": "–ü—Ä–æ–¥—É–∫—Ç—ã Apple"},
            {"name": "–ù–∞—Ö–æ–¥–∫–∏", "icon": "üí°", "description": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏"},
            {"name": "–ö–æ–Ω–∫—É—Ä—Å—ã", "icon": "üéÅ", "description": "–ö–æ–Ω–∫—É—Ä—Å—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"},
            {"name": "Midjourney", "icon": "üé®", "description": "Midjourney –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"},
        ]

        added = 0
        skipped = 0

        for cat_data in new_categories:
            slug = slugify(cat_data['name'], allow_unicode=True)

            if Category.objects.filter(name=cat_data['name']).exists():
                self.stdout.write(self.style.WARNING(f'[SKIP] {cat_data["name"]} (already exists)'))
                skipped += 1
                continue

            try:
                Category.objects.create(
                    name=cat_data['name'],
                    slug=slug,
                    icon=cat_data['icon'],
                    description=cat_data['description']
                )
                self.stdout.write(self.style.SUCCESS(f'[ADD] {cat_data["name"]}'))
                added += 1
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'[ERROR] {cat_data["name"]}: {str(e)}'))
                skipped += 1

        self.stdout.write(self.style.SUCCESS(f'\nSummary:'))
        self.stdout.write(f'  Added: {added}')
        self.stdout.write(f'  Skipped: {skipped}')
        self.stdout.write(f'  Total categories: {Category.objects.count()}')
