"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python manage.py optimize_existing_images
"""

import os
from django.core.management.base import BaseCommand
from django.conf import settings
from PIL import Image
from articles.models import Article, Category, ArticleMedia


class Command(BaseCommand):
    help = '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']

        if dry_run:
            self.stdout.write(self.style.WARNING('–†–µ–∂–∏–º DRY RUN - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã'))

        total_saved = 0
        total_images = 0

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±–ª–æ–∂–µ–∫ —Å—Ç–∞—Ç–µ–π
        self.stdout.write('\nüì∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±–ª–æ–∂–µ–∫ —Å—Ç–∞—Ç–µ–π...')
        articles = Article.objects.exclude(cover_image='')
        for article in articles:
            if article.cover_image:
                saved = self.optimize_image(
                    article.cover_image.path,
                    max_width=1920,
                    max_height=1080,
                    quality=85,
                    dry_run=dry_run
                )
                if saved:
                    total_saved += saved
                    total_images += 1
                    self.stdout.write(f'  ‚úì {article.title[:50]}... ({saved} –±–∞–π—Ç)')

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.stdout.write('\nüìÅ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
        categories = Category.objects.exclude(icon_image='')
        for category in categories:
            if category.icon_image:
                saved = self.optimize_image(
                    category.icon_image.path,
                    max_width=200,
                    max_height=200,
                    quality=90,
                    dry_run=dry_run
                )
                if saved:
                    total_saved += saved
                    total_images += 1
                    self.stdout.write(f'  ‚úì {category.name} ({saved} –±–∞–π—Ç)')

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
        self.stdout.write('\nüñºÔ∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç–∞—Ç—å—è—Ö...')
        media_images = ArticleMedia.objects.filter(media_type='image')
        for media in media_images:
            if media.file:
                saved = self.optimize_image(
                    media.file.path,
                    max_width=1920,
                    max_height=1080,
                    quality=85,
                    dry_run=dry_run
                )
                if saved:
                    total_saved += saved
                    total_images += 1
                    self.stdout.write(f'  ‚úì {media.article.title[:50]}... ({saved} –±–∞–π—Ç)')

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ –ì–æ—Ç–æ–≤–æ!'))
        self.stdout.write(f'–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}')
        self.stdout.write(f'–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –º–µ—Å—Ç–∞: {self.format_bytes(total_saved)}')

    def optimize_image(self, image_path, max_width, max_height, quality, dry_run=False):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã—Ö –±–∞–π—Ç
        """
        if not os.path.exists(image_path):
            return 0

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            original_size = os.path.getsize(image_path)

            if dry_run:
                return original_size // 2  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(image_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            if img.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'P':
                    img = img.convert('RGBA')
                background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            original_width, original_height = img.size

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            ratio = min(max_width / original_width, max_height / original_height)

            # –£–º–µ–Ω—å—à–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if ratio < 1:
                new_width = int(original_width * ratio)
                new_height = int(original_height * ratio)
                img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_path = f"{image_path}.temp.jpg"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img.save(
                temp_path,
                format='JPEG',
                quality=quality,
                optimize=True,
                progressive=True
            )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            new_size = os.path.getsize(temp_path)

            # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–µ–Ω—å—à–µ - –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            if new_size < original_size:
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                os.remove(image_path)

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                new_path = os.path.splitext(image_path)[0] + '.jpg'
                os.rename(temp_path, new_path)

                saved = original_size - new_size
                return saved
            else:
                # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–æ–ª—å—à–µ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
                os.remove(temp_path)
                return 0

        except Exception as e:
            self.stderr.write(f'  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {image_path}: {e}')
            return 0

    def format_bytes(self, bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if bytes < 1024.0:
                return f"{bytes:.1f} {unit}"
            bytes /= 1024.0
        return f"{bytes:.1f} –¢–ë"
