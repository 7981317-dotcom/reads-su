from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from slugify import slugify  # –ò—Å–ø–æ–ª—å–∑—É–µ–º python-slugify –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
from django.utils import timezone
from django.utils.html import strip_tags
import re
from .utils.image_optimizer import optimize_image, optimize_icon


def create_slug(text):
    """–°–æ–∑–¥–∞–µ—Ç slug —Å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É"""
    # slugify –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Å –ø–æ–º–æ—â—å—é unidecode
    slug = slugify(text)
    if not slug:
        # –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ —Ö—ç—à–∞
        slug = f"slug-{hash(text) % 100000}"
    return slug


class Category(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç–∞—Ç–µ–π"""
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=100, unique=True)
    slug = models.SlugField('URL', max_length=100, unique=True, blank=True)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    icon = models.CharField('–ò–∫–æ–Ω–∫–∞ (emoji)', max_length=10, blank=True, default='üìÅ')
    icon_image = models.ImageField('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏', upload_to='categories/icons/', blank=True, null=True)
    color = models.CharField('–¶–≤–µ—Ç', max_length=7, default='#3B82F6', help_text='HEX —Ü–≤–µ—Ç')
    order = models.IntegerField('–ü–æ—Ä—è–¥–æ–∫', default=0)
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        ordering = ['order', 'name']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = create_slug(self.name)

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if self.icon_image:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if not self.pk or self._state.adding:
                    self.icon_image = optimize_icon(self.icon_image, size=200, quality=90)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        old_instance = Category.objects.get(pk=self.pk)
                        if old_instance.icon_image != self.icon_image:
                            self.icon_image = optimize_icon(self.icon_image, size=200, quality=90)
                    except Category.DoesNotExist:
                        self.icon_image = optimize_icon(self.icon_image, size=200, quality=90)
            except Exception as e:
                # –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('articles:category', kwargs={'slug': self.slug})

    def article_count(self):
        return self.articles.filter(status='published').count()


class Tag(models.Model):
    """–¢–µ–≥ —Å—Ç–∞—Ç—å–∏"""
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=50, unique=True)
    slug = models.SlugField('URL', max_length=50, unique=True, blank=True)
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)

    class Meta:
        verbose_name = '–¢–µ–≥'
        verbose_name_plural = '–¢–µ–≥–∏'
        ordering = ['name']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = create_slug(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('articles:tag', kwargs={'slug': self.slug})

    def article_count(self):
        return self.articles.filter(status='published').count()


class Article(models.Model):
    """–°—Ç–∞—Ç—å—è"""
    STATUS_CHOICES = [
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
        ('archived', '–í –∞—Ä—Ö–∏–≤–µ'),
    ]

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = models.CharField('–ó–∞–≥–æ–ª–æ–≤–æ–∫', max_length=250)
    slug = models.SlugField('URL', max_length=250, unique=True, blank=True)
    subtitle = models.CharField('–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', max_length=300, blank=True)

    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    content = models.TextField('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ')
    excerpt = models.TextField('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', max_length=500, blank=True,
                                help_text='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)')

    # –û–±–ª–æ–∂–∫–∞
    cover_image = models.ImageField('–û–±–ª–æ–∂–∫–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)', upload_to='articles/covers/%Y/%m/', blank=True, null=True)
    cover_video = models.FileField('–û–±–ª–æ–∂–∫–∞ (–≤–∏–¥–µ–æ)', upload_to='articles/covers/videos/%Y/%m/', blank=True, null=True,
                                    help_text='–í–∏–¥–µ–æ –æ–±–ª–æ–∂–∫–∞ (mp4, webm). –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    cover_video_url = models.CharField('–û–±–ª–æ–∂–∫–∞ (–≤–∏–¥–µ–æ –ø–æ URL)', max_length=500, blank=True,
                                        help_text='URL –≤–∏–¥–µ–æ –∏–ª–∏ YouTube (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://www.youtube.com/watch?v=... –∏–ª–∏ youtube:VIDEO_ID)')
    cover_alt = models.CharField('Alt —Ç–µ–∫—Å—Ç –æ–±–ª–æ–∂–∫–∏', max_length=200, blank=True)

    # –°–≤—è–∑–∏
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='articles',
                                verbose_name='–ê–≤—Ç–æ—Ä')
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True,
                                  related_name='articles', verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    tags = models.ManyToManyField(Tag, related_name='articles', verbose_name='–¢–µ–≥–∏', blank=True)

    # –°—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—ã
    status = models.CharField('–°—Ç–∞—Ç—É—Å', max_length=10, choices=STATUS_CHOICES, default='draft')
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)
    updated_at = models.DateTimeField('–û–±–Ω–æ–≤–ª–µ–Ω–æ', auto_now=True)
    published_at = models.DateTimeField('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', null=True, blank=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    views_count = models.PositiveIntegerField('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', default=0)
    likes_count = models.PositiveIntegerField('–õ–∞–π–∫–∏', default=0)
    comments_count = models.PositiveIntegerField('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', default=0)

    # SEO
    meta_title = models.CharField('SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫', max_length=70, blank=True)
    meta_description = models.CharField('SEO –æ–ø–∏—Å–∞–Ω–∏–µ', max_length=160, blank=True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    featured = models.BooleanField('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', default=False,
                                    help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
    allow_comments = models.BooleanField('–†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', default=True)
    is_pinned = models.BooleanField('–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ', default=False)
    pin_order = models.PositiveIntegerField('–ü–æ—Ä—è–¥–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è', default=0,
                                             help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏ (1 - –≤–≤–µ—Ä—Ö—É, 2 - –≤—Ç–æ—Ä–æ–π –∏ —Ç.–¥.). 0 - –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ')

    class Meta:
        verbose_name = '–°—Ç–∞—Ç—å—è'
        verbose_name_plural = '–°—Ç–∞—Ç—å–∏'
        ordering = ['-is_pinned', 'pin_order', '-published_at', '-created_at']
        indexes = [
            models.Index(fields=['-published_at']),
            models.Index(fields=['status']),
            models.Index(fields=['author']),
            models.Index(fields=['category']),
        ]

    def save(self, *args, **kwargs):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        if not self.slug:
            self.slug = create_slug(self.title)

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ —Å—Ç–∞—Ç—å–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        if self.cover_image:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if not self.pk or self._state.adding:
                    self.cover_image = optimize_image(self.cover_image, max_width=1200, max_height=800, quality=85, crop=False)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        old_instance = Article.objects.get(pk=self.pk)
                        if old_instance.cover_image != self.cover_image:
                            self.cover_image = optimize_image(self.cover_image, max_width=1200, max_height=800, quality=85, crop=False)
                    except Article.DoesNotExist:
                        self.cover_image = optimize_image(self.cover_image, max_width=1200, max_height=800, quality=85, crop=False)
            except Exception as e:
                # –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è excerpt –∏–∑ content
        if not self.excerpt and self.content:
            # –û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤ –∏ iframe –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            clean_content = self.content

            # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ (–≤–∫–ª—é—á–∞—è iframe, div, –∏ —Ç.–¥.)
            clean_content = re.sub(r'<[^>]+>', '', clean_content)

            # –£–¥–∞–ª—è–µ–º markdown —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ![alt](url)
            clean_content = re.sub(r'!\[([^\]]*)\]\([^\)]+\)', r'\1', clean_content)

            # –£–¥–∞–ª—è–µ–º markdown —Å—Å—ã–ª–∫–∏ [text](url)
            clean_content = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', clean_content)

            # –£–¥–∞–ª—è–µ–º markdown –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **text** –∏–ª–∏ __text__
            clean_content = re.sub(r'\*\*([^\*]+)\*\*', r'\1', clean_content)
            clean_content = re.sub(r'__([^_]+)__', r'\1', clean_content)

            # –£–¥–∞–ª—è–µ–º markdown –∫—É—Ä—Å–∏–≤ *text* –∏–ª–∏ _text_
            clean_content = re.sub(r'\*([^\*]+)\*', r'\1', clean_content)
            clean_content = re.sub(r'_([^_]+)_', r'\1', clean_content)

            # –£–¥–∞–ª—è–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ (#, ##, ###)
            clean_content = re.sub(r'^#+\s+', '', clean_content, flags=re.MULTILINE)

            # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            clean_content = re.sub(r'\s+', ' ', clean_content).strip()

            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
            self.excerpt = clean_content[:300] + '...' if len(clean_content) > 300 else clean_content

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if self.status == 'published' and not self.published_at:
            self.published_at = timezone.now()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO –ø–æ–ª–µ–π
        if not self.meta_title:
            self.meta_title = self.title[:70]
        if not self.meta_description:
            self.meta_description = self.excerpt[:160] if self.excerpt else ''

        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('articles:detail', kwargs={'slug': self.slug})

    def reading_time(self):
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è"""
        words_per_minute = 200
        word_count = len(self.content.split())
        minutes = word_count / words_per_minute
        return max(1, round(minutes))

    def increment_views(self):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        self.views_count += 1
        self.save(update_fields=['views_count'])


class ArticleView(models.Model):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç–∞—Ç—å–∏ (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)"""
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='views')
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    ip_address = models.GenericIPAddressField('IP –∞–¥—Ä–µ—Å', null=True, blank=True)
    user_agent = models.CharField('User Agent', max_length=300, blank=True)
    viewed_at = models.DateTimeField('–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', auto_now_add=True)

    class Meta:
        verbose_name = '–ü—Ä–æ—Å–º–æ—Ç—Ä'
        verbose_name_plural = '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'
        ordering = ['-viewed_at']
        indexes = [
            models.Index(fields=['article', '-viewed_at']),
        ]

    def __str__(self):
        return f'{self.article.title} - {self.viewed_at}'


class Reaction(models.Model):
    """–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é (–ª–∞–π–∫–∏, –∑–∞–∫–ª–∞–¥–∫–∏)"""
    REACTION_TYPES = [
        ('like', '–õ–∞–π–∫'),
        ('bookmark', '–ó–∞–∫–ª–∞–¥–∫–∞'),
    ]

    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='reactions')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reactions')
    reaction_type = models.CharField('–¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏', max_length=10, choices=REACTION_TYPES)
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)

    class Meta:
        verbose_name = '–†–µ–∞–∫—Ü–∏—è'
        verbose_name_plural = '–†–µ–∞–∫—Ü–∏–∏'
        unique_together = ['article', 'user', 'reaction_type']
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['article', 'reaction_type']),
            models.Index(fields=['user', 'reaction_type']),
        ]

    def __str__(self):
        return f'{self.user.username} - {self.get_reaction_type_display()} - {self.article.title}'


class ArticleMedia(models.Model):
    """–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç–µ–π"""
    MEDIA_TYPES = [
        ('image', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
        ('video', '–í–∏–¥–µ–æ'),
    ]

    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='media_files', verbose_name='–°—Ç–∞—Ç—å—è')
    media_type = models.CharField('–¢–∏–ø –º–µ–¥–∏–∞', max_length=10, choices=MEDIA_TYPES, default='image')
    file = models.FileField('–§–∞–π–ª', upload_to='articles/media/%Y/%m/')
    title = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, blank=True)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    alt_text = models.CharField('Alt —Ç–µ–∫—Å—Ç', max_length=200, blank=True, help_text='–î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    order = models.PositiveIntegerField('–ü–æ—Ä—è–¥–æ–∫', default=0)
    created_at = models.DateTimeField('–ó–∞–≥—Ä—É–∂–µ–Ω–æ', auto_now_add=True)

    class Meta:
        verbose_name = '–ú–µ–¥–∏–∞-—Ñ–∞–π–ª'
        verbose_name_plural = '–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã'
        ordering = ['order', '-created_at']

    def save(self, *args, **kwargs):
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        if self.media_type == 'image' and self.file:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if not self.pk or self._state.adding:
                    self.file = optimize_image(self.file, max_width=1920, max_height=1080, quality=85)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        old_instance = ArticleMedia.objects.get(pk=self.pk)
                        if old_instance.file != self.file:
                            self.file = optimize_image(self.file, max_width=1920, max_height=1080, quality=85)
                    except ArticleMedia.DoesNotExist:
                        self.file = optimize_image(self.file, max_width=1920, max_height=1080, quality=85)
            except Exception as e:
                # –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞: {e}")

        super().save(*args, **kwargs)

    def __str__(self):
        return f'{self.get_media_type_display()} - {self.article.title}'

    @property
    def file_url(self):
        """–ü–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞"""
        return self.file.url if self.file else ''
